// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loglikelihood_pen
double loglikelihood_pen(Eigen::VectorXd theta, Eigen::MatrixXd X, Eigen::VectorXd y, std::vector<int> c, double sp, Eigen::MatrixXd S, size_t K);
RcppExport SEXP _flexl_loglikelihood_pen(SEXP thetaSEXP, SEXP XSEXP, SEXP ySEXP, SEXP cSEXP, SEXP spSEXP, SEXP SSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_pen(theta, X, y, c, sp, S, K));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood_pen_grad
NumericVector loglikelihood_pen_grad(Eigen::VectorXd theta, Eigen::MatrixXd X, Eigen::VectorXd y, std::vector<int> c, double sp, Eigen::MatrixXd S, size_t K);
RcppExport SEXP _flexl_loglikelihood_pen_grad(SEXP thetaSEXP, SEXP XSEXP, SEXP ySEXP, SEXP cSEXP, SEXP spSEXP, SEXP SSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_pen_grad(theta, X, y, c, sp, S, K));
    return rcpp_result_gen;
END_RCPP
}
// loglikelihood_pen_hess
NumericVector loglikelihood_pen_hess(Eigen::VectorXd theta, Eigen::MatrixXd X, Eigen::VectorXd y, std::vector<int> c, double sp, Eigen::MatrixXd S, size_t K);
RcppExport SEXP _flexl_loglikelihood_pen_hess(SEXP thetaSEXP, SEXP XSEXP, SEXP ySEXP, SEXP cSEXP, SEXP spSEXP, SEXP SSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type sp(spSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< size_t >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikelihood_pen_hess(theta, X, y, c, sp, S, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexl_loglikelihood_pen", (DL_FUNC) &_flexl_loglikelihood_pen, 7},
    {"_flexl_loglikelihood_pen_grad", (DL_FUNC) &_flexl_loglikelihood_pen_grad, 7},
    {"_flexl_loglikelihood_pen_hess", (DL_FUNC) &_flexl_loglikelihood_pen_hess, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
