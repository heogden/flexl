// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_loglikelihood_cluster_Cpp
double find_loglikelihood_cluster_Cpp(Rcpp::NumericVector& f0_c, Rcpp::NumericMatrix& fx_c, Rcpp::NumericVector& y_c, double sigma);
RcppExport SEXP _flexl_find_loglikelihood_cluster_Cpp(SEXP f0_cSEXP, SEXP fx_cSEXP, SEXP y_cSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type f0_c(f0_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type fx_c(fx_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type y_c(y_cSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(find_loglikelihood_cluster_Cpp(f0_c, fx_c, y_c, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flexl_find_loglikelihood_cluster_Cpp", (DL_FUNC) &_flexl_find_loglikelihood_cluster_Cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_flexl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
